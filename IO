//Imports Modules
import java.util.*;
import java.io.*;
import java.nio.*;
import java.nio.file.*;

class teacher_Slotting_IO{
//Public Variable Declarations
  static ArrayList<String> teacher_Name = new ArrayList<String>(); //Arraylist to temporarily store teacher names
  static ArrayList<String> teacher_Quals = new ArrayList<String>(); //Arraylist to temporarily store teacher quals
  static String currentDirPath = System.getProperty("user.dir"); //Finds the path of the working directory
  static ArrayList<String[]> schedule_Arr = new ArrayList<String[]>(); //ArrayList that stores the items in the csv
  static ArrayList<String> course_Codes = new ArrayList<String>(); //Arraylist to store and create a list of all the course codes  
  static ArrayList<String[]> period_Course_codes = new ArrayList<String[]>(); //ArrayList that course codes for each period
  
  static HashMap<String, String[]> teacher_names_and_quals = new HashMap<String, String[]>(); //Hashmap to store teacher names and quals
  
  //Method to read and store the content of a csv into an arraylist
  public static void file_Reader(String path, ArrayList<String[]> schedule_arr) throws IOException{
    File course_Scheduling = new File(currentDirPath + "\\WH.csv"); //Finds csv
    String line = " "; //Initializes line variable
    BufferedReader filereader = new BufferedReader(new FileReader(course_Scheduling)); //Bufferedreader to read the file
    try {
      line = filereader.readLine(); //Reads first line and discards it
      while ((line = filereader.readLine())!= null){ //Keeps running until all lines are read
        String[] temprowarray = line.split(","); //Stores the seperated values of each row into an array
        schedule_arr.add(temprowarray); //Adds array into an arraylist
      }
    }
    catch (IOException e){ //If a file wasn't found
      System.out.println("A file was not found.");
    }
    finally{
      filereader.close(); //Closes filereader
    }
  }
  //Method that stores all the course codes into an arraylist
  public static void course_code_Saver(ArrayList<String[]> schedule_arr, ArrayList<String> course_code_arr) throws IOException{
    for (int i = 0; i < schedule_arr.size(); i++){
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          if (!course_code_arr.contains(course_code)){ //If course code doesn't already exist in the arraylist, add it
            course_code_arr.add(course_code); //Adds course code into the arraylist
          }
        }
      }
    }
  }
  
  
  //Method that stores teacher quals into a file
  public static void file_Save(ArrayList<String[]> teacher_qual, ArrayList<String> teacher_names, String path) throws IOException{
    File teacher_qualifications = new File(path + "\\Teacher Qualifications");
    //Writer set to true so that each write would add content without overwriting
    FileWriter writer = new FileWriter(teacher_qualifications, true); 
    try{
      //Loop that populates the csv file
      for (int i = 0; i < teacher_names.size(); i++){
        writer.append(teacher_names.get(i) + ","); //Writes in teacher name
        for (int j = 0; j < teacher_qual.get(i).length; j++){
          writer.append(teacher_qual.get(i)[j] + ","); //Writes in corresponding qualifications
        }
        writer.append("\n"); //Moves to next row
      }
    }
    catch (IOException e){
      System.out.println("An IOException has occurred.");
    }
    finally{
      writer.close(); //Closes writer
    }
  }
  
  //Method that obtains the course codes for each period
  public static void period_course_code_Obtainer(ArrayList<String[]> period_Ccodes, ArrayList<String[]> schedule_arr){
    ArrayList<String> temp_Code_storer = new ArrayList<String>(); //ArrayList that temporarily stores the courses of a period
    int index = 0; //Records where the loop left off
    for (int i = index; i < schedule_arr.size(); i++){ 
      if (schedule_arr.get(i)[0].equals("2")){ //If period 2 is reached
        index = i; //Saves where it was left off
        String[] period_courses = new String[temp_Code_storer.size()];
        for (int k = 0; k < temp_Code_storer.size(); k++){
          period_courses[k] = temp_Code_storer.get(k); //Transfers arraylist info into an array
        }
        period_Ccodes.add(period_courses);//Adds period course array into the arraylist
        temp_Code_storer.clear(); //Clears arraylist for future sessions
        break; //Breaks out of loop
      }
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          temp_Code_storer.add(course_code); //Adds array into arraylist
        }
      }
    }
    for (int i = index; i < schedule_arr.size(); i++){ 
      if (schedule_arr.get(i)[0].equals("4")){ //If period 4 is reached
        index = i; //Saves where it was left off
        String[] period_courses = new String[temp_Code_storer.size()];
        for (int k = 0; k < temp_Code_storer.size(); k++){
          period_courses[k] = temp_Code_storer.get(k); //Transfers arraylist info into an array
        }
        period_Ccodes.add(period_courses);//Adds period course array into the arraylist
        temp_Code_storer.clear(); //Clears arraylist for future sessions
        break; //Breaks out of loop
      }
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          temp_Code_storer.add(course_code); //Adds array into arraylist
        }
      }
    }
    for (int i = index; i < schedule_arr.size(); i++){ 
      if (schedule_arr.get(i)[0].equals("5")){ //If period 5 is reached
        index = i; //Saves where it was left off
        String[] period_courses = new String[temp_Code_storer.size()];
        for (int k = 0; k < temp_Code_storer.size(); k++){
          period_courses[k] = temp_Code_storer.get(k); //Transfers arraylist info into an array
        }
        period_Ccodes.add(period_courses);//Adds period course array into the arraylist
        temp_Code_storer.clear(); //Clears arraylist for future sessions
        break; //Breaks out of loop
      }
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          temp_Code_storer.add(course_code); //Adds array into arraylist
        }
      }
    }
    for (int i = index; i < schedule_arr.size(); i++){ 
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          temp_Code_storer.add(course_code); //Adds array into arraylist
        }
      }
    }
    String[] period_courses = new String[temp_Code_storer.size()];
    for (int k = 0; k < temp_Code_storer.size(); k++){
      period_courses[k] = temp_Code_storer.get(k); //Transfers arraylist info into an array
    }
    
    period_Ccodes.add(period_courses);//Adds period course array into the arraylist
    temp_Code_storer.clear(); //Clears arraylist for future sessions
  }
  public static void main(String[] args) throws IOException{
    file_Reader(currentDirPath, schedule_Arr);
    course_code_Saver(schedule_Arr, course_Codes);
    period_course_code_Obtainer(period_Course_codes, schedule_Arr);
    for (int i = 0; i < period_Course_codes.size(); i++){
      System.out.println("Period " + (i + 1) + " Codes");
      for (int j = 0; j < period_Course_codes.get(i).length; j++){
        System.out.println(period_Course_codes.get(i)[j]);
      }
    }
  }
  
  
}
