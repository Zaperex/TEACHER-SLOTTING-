//Imports Modules
import java.util.*;
import java.io.*;
import java.nio.*;
import java.nio.file.*;

class teacher_Slotting_IO{
//Public Variable Declarations
  static ArrayList<String> teacher_Name = new ArrayList<String>(); //Arraylist to temporarily store teacher names
  static ArrayList<String> teacher_Quals = new ArrayList<String>(); //Arraylist to temporarily store teacher quals
  static String currentDirPath = System.getProperty("user.dir"); //Finds the path of the working directory
  static ArrayList<String[]> schedule_Arr = new ArrayList<String[]>(); //ArrayList that stores the items in the csv
  static ArrayList<String> course_Codes = new ArrayList<String>(); //Arraylist to store and create a list of all the course codes  
  static ArrayList<String[]> period_Course_codes = new ArrayList<String[]>(); //ArrayList that course codes for each period
  
  static HashMap<String, String[]> teacher_names_and_quals = new HashMap<String, String[]>(); //Hashmap to store teacher names and quals
  static HashMap<String, Boolean[]> teacher_names_and_res = new HashMap<String, Boolean[]>(); //Hashmap to store teacher names and restrictions
  static ArrayList<HashMap<String, String>> teacher_and_courses = new ArrayList<HashMap<String, String>>(); //Arraylist that stores the hashmap that stores the teachers for each period's courses
  
  //Method that moves a file
  public static void file_Mover(String filePath, String path) throws IOException{
    Path filemove = Files.move(Paths.get(filePath), Paths.get(path + "\\Course_Schedule.csv")); //Moves the file
  }
  
  //Method to read and store the content of a csv into an arraylist
  public static void file_Reader(String path, ArrayList<String[]> schedule_arr) throws IOException{
    File course_Scheduling = new File(currentDirPath + "\\Course_Schedule.csv"); //Finds csv
    String line = " "; //Initializes line variable
    BufferedReader filereader = new BufferedReader(new FileReader(course_Scheduling)); //Bufferedreader to read the file
    try {
      line = filereader.readLine(); //Reads first line and discards it
      while ((line = filereader.readLine())!= null){ //Keeps running until all lines are read
        String[] temprowarray = line.split(","); //Stores the seperated values of each row into an array
        schedule_arr.add(temprowarray); //Adds array into an arraylist
      }
    }
    catch (IOException e){ //If a file wasn't found
      System.out.println("A file was not found.");
    }
    finally{
      filereader.close(); //Closes filereader
    }
  }
  //Method that stores all the course codes into an arraylist
  public static void course_code_Saver(ArrayList<String[]> schedule_arr, ArrayList<String> course_code_arr) throws IOException{
    for (int i = 0; i < schedule_arr.size(); i++){
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          if (!course_code_arr.contains(course_code)){ //If course code doesn't already exist in the arraylist, add it
            course_code_arr.add(course_code); //Adds course code into the arraylist
          }
        }
      }
    }
  }
  
  
  //Method that stores teacher quals into a file
  public static void file_Save(String[] teacher_qual, String teacher_names, String path) throws IOException{
    File teacher_qualifications = new File(path + "\\Teacher_Qualifications.csv");
    //Writer set to true so that each write would add content without overwriting
    FileWriter writer = new FileWriter(teacher_qualifications, true); 
    try{
      writer.append(teacher_names + ","); //Writes in teacher name
      //Loop that populates the csv file with the teacher's qualifications
      for (int i = 0; i < teacher_qual.length; i++){
        writer.append(teacher_qual[i] + ","); //Writes in corresponding qualifications
      }
      writer.append("\n"); //Moves to next row
    }
    catch (IOException e){
      System.out.println("An IOException has occurred.");
    }
    finally{
      writer.close(); //Closes writer
    }
  }
  //Method that stores teacher restrictions into a file
  public static void restrict_file_Save(Boolean[] teacher_res, String teacher_names, String path) throws IOException{
    File teacher_restrictions = new File(path + "\\Teacher_Restrictions.csv");
    //Writer set to true so that each write would add content without overwriting
    FileWriter writer = new FileWriter(teacher_restrictions, true); 
    try{
      writer.append(teacher_names + ","); //Writes in teacher name
      //Loop that populates the csv file with the teacher's restrictions
      for (int i = 0; i < teacher_res.length; i++){
        writer.append((Boolean.toString(teacher_res[i])) + ","); //Writes in corresponding restrictions
      }
      writer.append("\n"); //Moves to next row
    }
    catch (IOException e){
      System.out.println("An IOException has occurred.");
    }
    finally{
      writer.close(); //Closes writer
    }
  }
  
  //Method that obtains the course codes for each period
  public static void period_course_code_Obtainer(ArrayList<String[]> period_Ccodes, ArrayList<String[]> schedule_arr){
    ArrayList<String> temp_Code_storer = new ArrayList<String>(); //ArrayList that temporarily stores the courses of a period
    int index = 0; //Records where the loop left off
    for (int i = index; i < schedule_arr.size(); i++){ 
      if (schedule_arr.get(i)[0].equals("2")){ //If period 2 is reached
        index = i; //Saves where it was left off
        String[] period_courses = temp_Code_storer.toArray(new String[temp_Code_storer.size()]); //Converts arraylist into an array
        period_Ccodes.add(period_courses);//Adds period course array into the arraylist
        temp_Code_storer.clear(); //Clears arraylist for future sessions
        break; //Breaks out of loop
      }
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          temp_Code_storer.add(course_code); //Adds array into arraylist
        }
      }
    }
    for (int i = index; i < schedule_arr.size(); i++){ 
      if (schedule_arr.get(i)[0].equals("4")){ //If period 4 is reached
        index = i; //Saves where it was left off
        String[] period_courses = temp_Code_storer.toArray(new String[temp_Code_storer.size()]); //Converts arraylist into an array
        period_Ccodes.add(period_courses);//Adds period course array into the arraylist
        temp_Code_storer.clear(); //Clears arraylist for future sessions
        break; //Breaks out of loop
      }
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          temp_Code_storer.add(course_code); //Adds array into arraylist
        }
      }
    }
    for (int i = index; i < schedule_arr.size(); i++){ 
      if (schedule_arr.get(i)[0].equals("5")){ //If period 5 is reached
        index = i; //Saves where it was left off
        String[] period_courses = temp_Code_storer.toArray(new String[temp_Code_storer.size()]); //Converts arraylist into an array
        period_Ccodes.add(period_courses);//Adds period course array into the arraylist
        temp_Code_storer.clear(); //Clears arraylist for future sessions
        break; //Breaks out of loop
      }
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          temp_Code_storer.add(course_code); //Adds array into arraylist
        }
      }
    }
    for (int i = index; i < schedule_arr.size(); i++){ 
      for (int j = 0; j < schedule_arr.get(i).length; j++){
        if (schedule_arr.get(i)[j].contains("-")){ //All course codes have a - which is how we find them
          String course_code = schedule_arr.get(i)[j]; //Temporarily stores course code + section number into a string value
          course_code = course_code.substring(0, course_code.length() - 3); //Removes the - and section number
          temp_Code_storer.add(course_code); //Adds array into arraylist
        }
      }
    }
    String[] period_courses = temp_Code_storer.toArray(new String[temp_Code_storer.size()]); //Converts arraylist into an array
    
    period_Ccodes.add(period_courses);//Adds period course array into the arraylist
    temp_Code_storer.clear(); //Clears arraylist for future sessions
  }
  
  //Reads created teacher_qualifications file and stores the contents into a hashmap
  public static void hashMap_Storer(String path, HashMap<String, String[]>teacher_Hashmap, ArrayList<String> teacher_Names) throws IOException{
    File course_Scheduling = new File(currentDirPath + "\\Teacher_Qualifications.csv"); //Finds csv
    String line = " "; //Initializes line variable
    ArrayList<String> temp_teacher_quals = new ArrayList<String>(); //Temp array to store the remainder of the array
    BufferedReader filereader = new BufferedReader(new FileReader(course_Scheduling)); //Bufferedreader to read the file
    teacher_Hashmap.clear(); //Clears Hashmap to make sure it was empty
    teacher_Names.clear(); //Clears arraylist to make sure it was empty
    try {
      while ((line = filereader.readLine())!= null){ //Keeps running until all lines are read
        String[] temprowarray = line.split(","); //Stores the seperated values of each row into an array
        String teacher_name = temprowarray[0]; //Stores teacher name into a temp string value
        teacher_Names.add(teacher_name); //Adds teacher name into teacher names arraylist
        for (int i = 1; i < temprowarray.length; i++){
          temp_teacher_quals.add(temprowarray[i]); //Adds array values into arraylist
        }
        String[] hashmap_qual_Arr = temp_teacher_quals.toArray(new String[temp_teacher_quals.size()]); //Converts the arraylist back into an array
        teacher_Hashmap.put(teacher_name, hashmap_qual_Arr); //Adds items into a hashmap
        temp_teacher_quals.clear(); //Clears the arraylist
      }
      
    }
    catch (IOException e){ //If a file wasn't found
      System.out.println("A file was not found.");
    }
    finally{
      filereader.close(); //Closes filereader
    }
  }
  
  //Reads created teacher_restrictions file and stores the contents into a hashmap
  public static void restrict_hashMap_Storer(String path, HashMap<String, Boolean[]>teacher_res_Hashmap, ArrayList<String> teacher_Names) throws IOException{
    File course_Scheduling = new File(currentDirPath + "\\Teacher_Restrictions.csv"); //Finds csv
    String line = " "; //Initializes line variable
    ArrayList<Boolean> temp_teacher_res = new ArrayList<Boolean>(); //Temp array to store the remainder of the array
    BufferedReader filereader = new BufferedReader(new FileReader(course_Scheduling)); //Bufferedreader to read the file
    teacher_res_Hashmap.clear(); //Clears Hashmap to make sure it was empty
    teacher_Names.clear(); //Clears arraylist to make sure it was empty
    try {
      while ((line = filereader.readLine())!= null){ //Keeps running until all lines are read
        String[] temprowarray = line.split(","); //Stores the seperated values of each row into an array
        String teacher_name = temprowarray[0]; //Stores teacher name into a temp boolean value
        teacher_Names.add(teacher_name); //Adds teacher name into teacher names arraylist
        for (int i = 1; i < temprowarray.length; i++){
          temp_teacher_res.add(Boolean.parseBoolean(temprowarray[i])); //Adds array values into arraylist
        }
        Boolean[] hashmap_res_Arr = temp_teacher_res.toArray(new Boolean[temp_teacher_res.size()]); //Converts the arraylist back into an array
        teacher_res_Hashmap.put(teacher_name, hashmap_res_Arr); //Adds items into a hashmap
        temp_teacher_res.clear(); //Clears the arraylist
      }
    }
    catch(IOException e){
      System.out.println("IOExcpetion has occured");
    }
    finally{
      filereader.close(); //Closes filereader
    }
  }
  
  //Method that slots teachers into course codes and stores them in hashmaps
  public static void teacher_slotting(ArrayList<String> teacher_Names, ArrayList<HashMap<String, String>> teacher_and_course,
                                      HashMap<String, String[]> teacher_Quals, ArrayList<String[]> period_Cc) throws IOException{
    ArrayList<String> teacher_edit = new ArrayList<String>(); //Creates arraylist
    HashMap<String, String> course_and_teacher = new HashMap<String, String>(); //Temporary hashmap to store teacher and courses
    boolean teacherFound = false; //boolean value to determine if teacher is found or not
    
    
    for (int m = 0; m < 4; m++){ //Loops through it 4 times to slot all 4 periods
      for (int i = 0; i < teacher_Names.size(); i++){
        teacher_edit.add(teacher_Names.get(i)); //Creates a copy of the teacher names array
      }
      for (int i = 0; i < period_Cc.get(m).length; i++){ //Loops through all courses in a period
        teacherFound = false; //Resets to false
        for (int j = 0; j < teacher_edit.size(); j++){ //Loops through all teachers
          if (teacherFound == true){ //If teacher is already found, break out of loop
            break;
          }
          for (int k = 0; k < teacher_Quals.get(teacher_edit.get(j)).length; k++){ //Loops through and checks teacher qualifications
            if (teacher_Quals.get(teacher_edit.get(j))[k].contains(period_Cc.get(0)[i])){ //If teacher has the qualifications
              course_and_teacher.put(period_Cc.get(0)[i],teacher_edit.get(j)); //Adds teacher to hashmap as value with corresponding course code as key
              teacherFound = true; //Sets to true to indicate teacher was found
              teacher_edit.remove(j); //Removes teacher as to prevent duplicates
            }
          }
        }
      }
      teacher_and_course.add(course_and_teacher); //Adds period Hashmap into arraylist
      teacher_edit.clear(); //Clears to make sure array is empty for next session
    }
    
    
    
  }
  
  //Method that stores teacher and the courses they're teaching into an array
  public static void teacher_course_Storer(ArrayList<HashMap<String, String>> teacher_and_course, ArrayList<String> teacher_Names){
    
  }
  
  public static void main(String[] args) throws IOException{
    file_Reader(currentDirPath, schedule_Arr);
    course_code_Saver(schedule_Arr, course_Codes);
    period_course_code_Obtainer(period_Course_codes, schedule_Arr);
    for (int i = 0; i < period_Course_codes.size(); i++){
      System.out.println("Period " + (i + 1) + " Codes");
      for (int j = 0; j < period_Course_codes.get(i).length; j++){
        System.out.println(period_Course_codes.get(i)[j]);
      }
    }
  }
  
}
